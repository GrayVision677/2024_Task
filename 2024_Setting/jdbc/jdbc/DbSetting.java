package jdbc;

import java.io.File;
import java.io.FileInputStream;
import java.util.Vector;

public class DbSetting {

	private DbManager db;

	public DbSetting() {
		// TODO Auto-generated constructor stub
		db = new DbManager();
		try {
			db.dbSet("-- MySQL Script generated by MySQL Workbench\r\n"
					+ "-- Wed Feb 21 09:30:27 2024\r\n"
					+ "-- Model: New Model    Version: 1.0\r\n"
					+ "-- MySQL Workbench Forward Engineering\r\n"
					+ "\r\n"
					+ "SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;\r\n"
					+ "SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;\r\n"
					+ "SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';\r\n"
					+ "\r\n"
					+ "-- -----------------------------------------------------\r\n"
					+ "-- Schema oldpopsong\r\n"
					+ "-- -----------------------------------------------------\r\n"
					+ "DROP SCHEMA IF EXISTS `oldpopsong` ;\r\n"
					+ " \r\n"
					+ "-- -----------------------------------------------------\r\n"
					+ "-- Schema oldpopsong\r\n"
					+ "-- -----------------------------------------------------\r\n"
					+ "CREATE SCHEMA IF NOT EXISTS `oldpopsong` DEFAULT CHARACTER SET utf8 ;\r\n"
					+ "USE `oldpopsong` ;\r\n"
					+ "\r\n"
					+ "-- -----------------------------------------------------\r\n"
					+ "-- Table `oldpopsong`.`music`\r\n"
					+ "-- -----------------------------------------------------\r\n"
					+ "CREATE TABLE IF NOT EXISTS `oldpopsong`.`music` (\r\n"
					+ "  `m_no` INT NOT NULL AUTO_INCREMENT,\r\n"
					+ "  `m_name` VARCHAR(100) NULL,\r\n"
					+ "  `singer` VARCHAR(50) NULL,\r\n"
					+ "  `album` VARCHAR(50) NULL,\r\n"
					+ "  `compser` VARCHAR(50) NULL,\r\n"
					+ "  `lyricist` VARCHAR(50) NULL,\r\n"
					+ "  `playtime` TIME NULL,\r\n"
					+ "  `agelimit` INT NULL,\r\n"
					+ "  `soundquality` VARCHAR(50) NULL,\r\n"
					+ "  `m_img` LONGBLOB NULL,\r\n"
					+ "  PRIMARY KEY (`m_no`))\r\n"
					+ "ENGINE = InnoDB;\r\n"
					+ "\r\n"
					+ "\r\n"
					+ "-- -----------------------------------------------------\r\n"
					+ "-- Table `oldpopsong`.`user`\r\n"
					+ "-- -----------------------------------------------------\r\n"
					+ "CREATE TABLE IF NOT EXISTS `oldpopsong`.`user` (\r\n"
					+ "  `u_no` INT NOT NULL AUTO_INCREMENT,\r\n"
					+ "  `id` VARCHAR(20) NULL,\r\n"
					+ "  `pw` VARCHAR(20) NULL,\r\n"
					+ "  `u_name` VARCHAR(20) NULL,\r\n"
					+ "  `birth` DATE NULL,\r\n"
					+ "  PRIMARY KEY (`u_no`))\r\n"
					+ "ENGINE = InnoDB;\r\n"
					+ "\r\n"
					+ "\r\n"
					+ "-- -----------------------------------------------------\r\n"
					+ "-- Table `oldpopsong`.`playlist`\r\n"
					+ "-- -----------------------------------------------------\r\n"
					+ "CREATE TABLE IF NOT EXISTS `oldpopsong`.`playlist` (\r\n"
					+ "  `p_no` INT NOT NULL AUTO_INCREMENT,\r\n"
					+ "  `u_no` INT NULL,\r\n"
					+ "  `m_no` INT NULL,\r\n"
					+ "  PRIMARY KEY (`p_no`),\r\n"
					+ "  INDEX `fk_playlist_music_idx` (`m_no` ASC) VISIBLE,\r\n"
					+ "  INDEX `fk_playlist_user1_idx` (`u_no` ASC) VISIBLE,\r\n"
					+ "  CONSTRAINT `fk_playlist_music`\r\n"
					+ "    FOREIGN KEY (`m_no`)\r\n"
					+ "    REFERENCES `oldpopsong`.`music` (`m_no`)\r\n"
					+ "    ON DELETE NO ACTION\r\n"
					+ "    ON UPDATE NO ACTION,\r\n"
					+ "  CONSTRAINT `fk_playlist_user1`\r\n"
					+ "    FOREIGN KEY (`u_no`)\r\n"
					+ "    REFERENCES `oldpopsong`.`user` (`u_no`)\r\n"
					+ "    ON DELETE NO ACTION\r\n"
					+ "    ON UPDATE NO ACTION)\r\n"
					+ "ENGINE = InnoDB;\r\n"
					+ "\r\n"
					+ "\r\n"
					+ "-- -----------------------------------------------------\r\n"
					+ "-- Table `oldpopsong`.`listenlist`\r\n"
					+ "-- -----------------------------------------------------\r\n"
					+ "CREATE TABLE IF NOT EXISTS `oldpopsong`.`listenlist` (\r\n"
					+ "  `l_no` INT NOT NULL AUTO_INCREMENT,\r\n"
					+ "  `p_no` INT NULL,\r\n"
					+ "  `time` VARCHAR(14) NULL,\r\n"
					+ "  `play_ox` INT NULL,\r\n"
					+ "  `stoptime` TIME NULL,\r\n"
					+ "  PRIMARY KEY (`l_no`),\r\n"
					+ "  INDEX `fk_listenlist_playlist1_idx` (`p_no` ASC) VISIBLE,\r\n"
					+ "  CONSTRAINT `fk_listenlist_playlist1`\r\n"
					+ "    FOREIGN KEY (`p_no`)\r\n"
					+ "    REFERENCES `oldpopsong`.`playlist` (`p_no`)\r\n"
					+ "    ON DELETE NO ACTION\r\n"
					+ "    ON UPDATE NO ACTION)\r\n"
					+ "ENGINE = InnoDB;\r\n"
					+ "\r\n"
					+ "\r\n"
					+ "SET SQL_MODE=@OLD_SQL_MODE;\r\n"
					+ "SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;\r\n"
					+ "SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;\r\n"
					+ "set global local_infile = 1;\r\n"
					+ "load data local infile './datafiles/music.txt' into table music lines terminated by '\r\n' ignore 1 lines;\r\n"
					+ "load data local infile './datafiles/user.txt' into table user lines terminated by '\r\n' ignore 1 lines;\r\n"
					+ "load data local infile './datafiles/playlist.txt' into table playlist lines terminated by '\\r\\n' ignore 1 lines;\r\n"
					+ "load data local infile './datafiles/listenlist.txt' into table listenlist lines terminated by '\r\n' ignore 1 lines;"
					);
			
					Vector<Vector<String>> data = db.getDb("SELECT * FROM oldpopsong.music;");
					
					for (Vector<String> row : data) {
						String m_no = row.get(0);
						
						File file = new File("./datafiles/album/" + m_no + ".jpg");
						
						try {
							FileInputStream files = new FileInputStream(file);
							
							db.dbSet("UPDATE `oldpopsong`.`music` SET `m_img` = ? WHERE (`m_no` = ?);",files,m_no);
						} catch (Exception e) {
							// TODO: handle exception
						}
					}
			
					System.out.println("DB설정성공");
		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
			System.out.println("실패");
		}
	}

}
